/***********************************************************************************************************
Generated by the KT-Adaptive-Generator!
The tool version : V2.2.1-e71a77
Copyright(C) 2021 Wuhan KOTEI Informatics Co.,Ltd. All rights reserved
***********************************************************************************************************/

#include "InterCommunication_skeleton.hpp"
#include "ara/com/AddressTranslator.h"
#include <iostream>

namespace v1 {
namespace ara_api {
namespace InterCommunication {
namespace skeleton {

InterCommunicationSkeleton::InterCommunicationSkeleton(
    ara::com::InstanceIdentifier instanceID,
    ara::com::MethodCallProcessingMode mode)
    : _running(true), InterEvent(&m_provid_instances),
      InterEventArr(&m_provid_instances), InterField(&m_provid_instances),
      InterFieldArr(&m_provid_instances) {
    m_get_method_result_thread = std::thread(std::bind(
        &InterCommunicationSkeleton::GetMethodCallResult_Doing, this));
    m_processing_mode = mode;
    m_provid_instances.push_back(instanceID);
}

InterCommunicationSkeleton::InterCommunicationSkeleton(
    ara::core::InstanceSpecifier instanceSpec,
    ara::com::MethodCallProcessingMode mode)
    : _running(true), InterEvent(&m_provid_instances),
      InterEventArr(&m_provid_instances), InterField(&m_provid_instances),
      InterFieldArr(&m_provid_instances) {
    m_get_method_result_thread = std::thread(std::bind(
        &InterCommunicationSkeleton::GetMethodCallResult_Doing, this));
    m_processing_mode = mode;
    ara::core::Result<ara::com::InstanceIdentifierContainer> result =
        ara::com::runtime::ResolveInstanceIDs(instanceSpec);
    if (result.HasValue()) {
        m_provid_instances = result.Value();
    } else {
        // std::cout << result.Error().Message();
    }
}

#ifdef CONFIG_ENABLE_PHM
long long getCurrentTimeMillis_skeleton() {
    return std::chrono::duration_cast<std::chrono::milliseconds>(
               std::chrono::system_clock::now().time_since_epoch())
        .count();
}
#endif // CONFIG_ENABLE_PHM

InterCommunicationSkeleton::InterCommunicationSkeleton(
    ara::com::InstanceIdentifierContainer instanceIDs,
    ara::com::MethodCallProcessingMode mode)
    : _running(true), InterEvent(&m_provid_instances),
      InterEventArr(&m_provid_instances), InterField(&m_provid_instances),
      InterFieldArr(&m_provid_instances) {
    m_get_method_result_thread = std::thread(std::bind(
        &InterCommunicationSkeleton::GetMethodCallResult_Doing, this));
    m_processing_mode = mode;
    m_provid_instances = instanceIDs;
}

ara::core::Result<void> InterCommunicationSkeleton::OfferService() {
    if (InterField.hasSetter() && InterField.m_set_handler == nullptr) {
        // return
        // ara::core::Result<void>::FromError(ara::com::ComErrc::kSetHandlerNotSet);
    }
    if (InterField.hasGetter() && InterField.m_get_handler == nullptr) {
        // return
        // ara::core::Result<void>::FromError(ara::com::ComErrc::kFieldValueIsNotValid);
    }

    try {
        for (auto instance : m_provid_instances) {
            std::string id(instance.toString());
            ara::com::Someip_Address someip_address;
            if (ara::com::AddressTranslator::get()->translate(id,
                                                              someip_address)) {
                ara::Runtime::getInstance()->offer_service(
                    someip_address.getService(), someip_address.getInstance(),
                    InterCommunicationIdentifier::serviceContractVersionMajor,
                    InterCommunicationIdentifier::serviceContractVersionMinor);

                ara::Runtime::getInstance()->offer_event(
                    someip_address.getService(), someip_address.getInstance(),
                    INTEREVENT_EVENT_ID, EVENTGROUP_INTERCOMMUNICATION,
                    InterCommunicationIdentifier::serviceContractVersionMajor);

                ara::Runtime::getInstance()->offer_event(
                    someip_address.getService(), someip_address.getInstance(),
                    INTEREVENTARR_EVENT_ID, EVENTGROUP_INTERCOMMUNICATION,
                    InterCommunicationIdentifier::serviceContractVersionMajor);

                ara::Runtime::getInstance()->offer_event(
                    someip_address.getService(), someip_address.getInstance(),
                    INTERFIELD_UPDATE_ID, EVENTGROUP_INTERCOMMUNICATION,
                    InterCommunicationIdentifier::serviceContractVersionMajor);

                ara::Runtime::getInstance()->offer_event(
                    someip_address.getService(), someip_address.getInstance(),
                    INTERFIELDARR_UPDATE_ID, EVENTGROUP_INTERCOMMUNICATION,
                    InterCommunicationIdentifier::serviceContractVersionMajor);

                if (m_processing_mode ==
                    ara::com::MethodCallProcessingMode::kEvent) {
                    ara::Runtime::getInstance()->registerMethodCallBack(
                        someip_address.getService(),
                        std::bind(&InterCommunicationSkeleton::
                                      ProcessNextMethodCallBykEvent,
                                  this, std::placeholders::_1));
                }
            } else {
                throw ara::com::ComException(
                    ara::com::ComErrc::kNetworkBindingFailure);
            }
        }
    } catch (ara::com::ComException e) {
        return ara::core::Result<void>::FromError(e.Error());
    }
    return ara::core::Result<void>::FromValue();
}

void InterCommunicationSkeleton::StopOfferService() {
    for (auto instance : m_provid_instances) {
        std::string id(instance.toString());
        ara::com::Someip_Address someip_address;
        if (ara::com::AddressTranslator::get()->translate(id, someip_address)) {

            ara::Runtime::getInstance()->stop_offer_event(
                someip_address.getService(), someip_address.getInstance(),
                INTEREVENT_EVENT_ID,
                InterCommunicationIdentifier::serviceContractVersionMajor);

            ara::Runtime::getInstance()->stop_offer_event(
                someip_address.getService(), someip_address.getInstance(),
                INTEREVENTARR_EVENT_ID,
                InterCommunicationIdentifier::serviceContractVersionMajor);

            ara::Runtime::getInstance()->stop_offer_event(
                someip_address.getService(), someip_address.getInstance(),
                INTERFIELD_UPDATE_ID,
                InterCommunicationIdentifier::serviceContractVersionMajor);

            ara::Runtime::getInstance()->stop_offer_event(
                someip_address.getService(), someip_address.getInstance(),
                INTERFIELDARR_UPDATE_ID,
                InterCommunicationIdentifier::serviceContractVersionMajor);

            ara::Runtime::getInstance()->stop_offer_service(
                someip_address.getService(), someip_address.getInstance(),
                InterCommunicationIdentifier::serviceContractVersionMajor);
        } else {
            throw ara::com::ComException(
                ara::com::ComErrc::kNetworkBindingFailure);
        }
    }
}

InterCommunicationSkeleton::InterCommunicationSkeleton(
    InterCommunicationSkeleton &&_Right)
    : _running(true), InterEvent(&m_provid_instances),
      InterEventArr(&m_provid_instances), InterField(&m_provid_instances),
      InterFieldArr(&m_provid_instances) {
    m_get_method_result_thread = std::thread(std::bind(
        &InterCommunicationSkeleton::GetMethodCallResult_Doing, this));
    *this = std::move(_Right);
}

InterCommunicationSkeleton &
InterCommunicationSkeleton::operator=(InterCommunicationSkeleton &&_Right) {
    *this = std::move(_Right);
    return *this;
}

ara::core::Future<bool> InterCommunicationSkeleton::ProcessNextMethodCall() {
    ara::core::Promise<bool> _promise;
    ara::core::Future<bool> _future = _promise.get_future();
    bool result = false;
    for (auto &instance : m_provid_instances) {
        ara::com::Someip_Address someip_address;
        if (ara::com::AddressTranslator::get()->translate(
                std::string(instance.toString()), someip_address)) {
            ara::Message msg = ara::Message::createRequestMessage(true);

            bool current_retult = ara::Runtime::getInstance()->method_call_exec(
                someip_address.getService(), someip_address.getInstance(), msg);
            ara::com::internal::MethodId method_id = msg.getMethod();
            if (current_retult) {
                result = current_retult;

                apf::Deserializer _in(msg.getBodyData(), msg.getBodyLength());
                switch (method_id) {
                case INTERREQUESTRR_METHOD_ID: {

                    Array_InterComm Array_InterReqOut;
                    if (apf::someip::SerializableArguments<
                            Array_InterComm>::Deserializer(_in,
                                                           Array_InterReqOut)) {
                        m_InterRequestRR_Return.insert(std::make_pair(
                            msg, std::move(InterRequestRR(Array_InterReqOut))));
                    }
                    break;
                }
                case INTERREQUEST_METHOD_ID: {

                    Array_InterComm Array_InterReqOut;
                    if (apf::someip::SerializableArguments<
                            Array_InterComm>::Deserializer(_in,
                                                           Array_InterReqOut)) {
                        InterRequest(Array_InterReqOut);
                    }
                    break;
                }
                case INTERFIELD_GETTER_ID: {
                    if (InterField.m_get_handler != nullptr) {
                        InterField.m_get_return.insert(std::make_pair(
                            msg, std::move(InterField.m_get_handler())));
                    }
                    break;
                }
                case INTERFIELD_SETTER_ID: {
                    if (InterField.m_set_handler != nullptr) {
                        Struct_InterField value;
                        if (apf::someip::SerializableArguments<
                                Struct_InterField>::Deserializer(_in, value)) {
                            InterField.m_set_return.insert(std::make_pair(
                                msg,
                                std::move(InterField.m_set_handler(value))));
                        } else {
                            auto reply = msg.createErrorResponseMessage(
                                apf::someip::MessageStandardHeader::ReturnCode::
                                    E_E2E_WRONG_SEQUENCE);
                            ara::Runtime::getInstance()->Response(reply);
                        }
                    }
                    break;
                }
                default:
                    auto reply = msg.createErrorResponseMessage(
                        apf::someip::MessageStandardHeader::ReturnCode::
                            E_UNKNOWN_METHOD);
                    ara::Runtime::getInstance()->Response(reply);
                    break;
                }
            }
        }
    }
    _promise.set_value(result);
    return _future;
}

ara::core::Future<bool>
InterCommunicationSkeleton::ProcessNextMethodCallBykEvent(ara::Message msg) {
    ara::core::Promise<bool> _promise;
    ara::core::Future<bool> _future = _promise.get_future();
    bool result = true;
    for (auto &instance : m_provid_instances) {
        ara::com::Someip_Address someip_address;
        if (ara::com::AddressTranslator::get()->translate(
                std::string(instance.toString()), someip_address)) {
            ara::com::internal::MethodId method_id = msg.getMethod();

            apf::Deserializer _in(msg.getBodyData(), msg.getBodyLength());
            switch (method_id) {
            case INTERREQUESTRR_METHOD_ID: {

                Array_InterComm Array_InterReqOut;
                if (apf::someip::SerializableArguments<
                        Array_InterComm>::Deserializer(_in,
                                                       Array_InterReqOut)) {
                    m_InterRequestRR_Return.insert(std::make_pair(
                        msg, std::move(InterRequestRR(Array_InterReqOut))));
                }
                break;
            }
            case INTERREQUEST_METHOD_ID: {

                Array_InterComm Array_InterReqOut;
                if (apf::someip::SerializableArguments<
                        Array_InterComm>::Deserializer(_in,
                                                       Array_InterReqOut)) {
                    InterRequest(Array_InterReqOut);
                }
                break;
            }
            case INTERFIELD_GETTER_ID: {
                if (InterField.m_get_handler != nullptr) {
                    InterField.m_get_return.insert(std::make_pair(
                        msg, std::move(InterField.m_get_handler())));
                } else {
                    // std::cout << "[InterCommunication][InterField] GETTER
                    // handler is not registered..." << std::endl;
                }
                break;
            }
            case INTERFIELD_SETTER_ID: {
                if (InterField.m_set_handler != nullptr) {
                    Struct_InterField value;
                    if (apf::someip::SerializableArguments<
                            Struct_InterField>::Deserializer(_in, value)) {
                        InterField.m_set_return.insert(std::make_pair(
                            msg, std::move(InterField.m_set_handler(value))));
                    }
                } else {
                    // std::cout << "[InterCommunication][InterField] SETTER
                    // handler is not registered..." << std::endl;
                }
                break;
            }
            default:
                break;
            }
        }
    }
    _promise.set_value(result);
    return _future;
}

void InterCommunicationSkeleton::Init() {
    // TODO
}

void InterCommunicationSkeleton::Deinit() {
    // TODO
}

InterCommunicationSkeleton::~InterCommunicationSkeleton() {
    _running = false;
    m_get_method_result_thread.join();
}

ara::com::MethodCallProcessingMode
InterCommunicationSkeleton::GetProcessingMode() const {
    return m_processing_mode;
}

void InterCommunicationSkeleton::GetMethodCallResult_Doing() {
    while (_running) {
        // sleep for a while,because if many(such as 10 services) services all
        // running,The cpu usage is large
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        {
            // std::vector<ara::Message> delete_requests;
            for (auto it = m_InterRequestRR_Return.begin();
                 it != m_InterRequestRR_Return.end();) {
                if (it->second.is_ready()) {
                    apf::Serializer _out;

                    Array_InterComm Array_InterRespOut = it->second.get();

                    if (apf::someip::SerializableArguments<
                            Array_InterComm>::Serializer(_out,
                                                         Array_InterRespOut)) {
                        auto reply = it->first.createResponseMessage();
                        reply.setPayloadData(
                            (uint8_t *)_out.getBuffSnapShot().data(),
                            _out.getBuffSnapShot().size());
#ifdef CONFIG_ENABLE_PHM
                        long current_time =
                            (long)getCurrentTimeMillis_skeleton();
#endif // CONFIG_ENABLE_PHM
                        ara::Runtime::getInstance()->Response(reply);
#ifdef CONFIG_ENABLE_PHM
                        ara::Runtime::getInstance()->send_call_chain_use_phm(
                            current_time, 0, std::to_string(reply.getMethod()),
                            std::to_string(reply.getClientId()), 0, 1, 0);
#endif // CONFIG_ENABLE_PHM
                    }
                    // delete_requests.push_back(it.first);
                    it = m_InterRequestRR_Return.erase(it);
                } else {
                    ++it;
                }
            }
        }
        {
            // std::vector<ara::Message> delete_requests;
            for (auto it = InterField.m_get_return.begin();
                 it != InterField.m_get_return.end();) {
                if (it->second.is_ready()) {
                    fields::InterField::FieldType value = it->second.get();
                    apf::Serializer _out;

                    if (apf::someip::SerializableArguments<
                            Struct_InterField>::Serializer(_out, value)) {
                        auto reply = it->first.createResponseMessage();
                        reply.setPayloadData(
                            (uint8_t *)_out.getBuffSnapShot().data(),
                            _out.getBuffSnapShot().size());
                        ara::Runtime::getInstance()->Response(reply);
                        /*std::cout << "Response service_id:" <<
                           reply.getService() <<
                            ",instance_id:" << reply.getInstance() <<
                           ",method_id:" << reply.getMethod() <<
                            ",session_id : " << reply.getSession() <<
                           std::endl;*/
                    }
                    // delete_requests.push_back(it.first);
                    it = InterField.m_get_return.erase(it);
                } else {
                    ++it;
                }
            }
        }

        {
            // std::vector<ara::Message> delete_requests;
            for (auto it = InterField.m_set_return.begin();
                 it != InterField.m_set_return.end();) {
                if (it->second.is_ready()) {
                    fields::InterField::FieldType value = it->second.get();
                    apf::Serializer _out;

                    if (apf::someip::SerializableArguments<
                            Struct_InterField>::Serializer(_out, value)) {
                        auto reply = it->first.createResponseMessage();
                        reply.setPayloadData(
                            (uint8_t *)_out.getBuffSnapShot().data(),
                            _out.getBuffSnapShot().size());
                        ara::Runtime::getInstance()->Response(reply);
                        /*std::cout << "Response service_id:" <<
                           reply.getService() <<
                            ",instance_id:" << reply.getInstance() <<
                           ",method_id:" << reply.getMethod() <<
                            ",session_id : " << reply.getSession() <<
                           std::endl;*/

                        InterField.Update(value);
                    }
                    // delete_requests.push_back(it.first);
                    it = InterField.m_set_return.erase(it);
                } else {
                    ++it;
                }
            }
        }
    }
}

namespace events {
InterEvent::InterEvent(ara::com::InstanceIdentifierContainer *_p)
    : _pProvideInstances(_p) {}

ara::core::Result<void> InterEvent::Send(SampleType &data) {
    for (auto &instance : *_pProvideInstances) {
        ara::com::Someip_Address someip_address;
        if (ara::com::AddressTranslator::get()->translate(
                std::string(instance.toString()), someip_address)) {
            apf::Serializer _out;

            if (apf::someip::SerializableArguments<
                    String_InterComm>::Serializer(_out, data)) {
                ara::Message notify_message =
                    ara::Message::createNotificationMessage(
                        someip_address.getService(),
                        someip_address.getInstance(), INTEREVENT_EVENT_ID);
                notify_message.setPayloadData(
                    (uint8_t *)_out.getBuffSnapShot().data(),
                    _out.getBuffSnapShot().size());
                ara::Runtime::getInstance()->notify(notify_message);
            }
        }
    }
    return ara::core::Result<void>();
}
InterEventArr::InterEventArr(ara::com::InstanceIdentifierContainer *_p)
    : _pProvideInstances(_p) {}

ara::core::Result<void> InterEventArr::Send(SampleType &data) {
    for (auto &instance : *_pProvideInstances) {
        ara::com::Someip_Address someip_address;
        if (ara::com::AddressTranslator::get()->translate(
                std::string(instance.toString()), someip_address)) {
            apf::Serializer _out;

            if (apf::someip::SerializableArguments<Array_InterComm>::Serializer(
                    _out, data)) {
                ara::Message notify_message =
                    ara::Message::createNotificationMessage(
                        someip_address.getService(),
                        someip_address.getInstance(), INTEREVENTARR_EVENT_ID);
                notify_message.setPayloadData(
                    (uint8_t *)_out.getBuffSnapShot().data(),
                    _out.getBuffSnapShot().size());
                ara::Runtime::getInstance()->notify(notify_message);
            }
        }
    }
    return ara::core::Result<void>();
}
} // namespace events

namespace fields {

InterField::InterField(ara::com::InstanceIdentifierContainer *_p)
    : _pProvideInstances(_p) {}

bool InterField::hasNotifier() { return true; }

bool InterField::hasGetter() { return true; }
bool InterField::hasSetter() { return true; }

ara::core::Result<void> InterField::Update(FieldType &value) {
    m_field_value = value;
    if (hasNotifier()) {
        // notify
        for (auto &instance : *_pProvideInstances) {
            ara::com::Someip_Address someip_address;
            if (ara::com::AddressTranslator::get()->translate(
                    std::string(instance.toString()), someip_address)) {
                apf::Serializer _out;

                if (apf::someip::SerializableArguments<
                        Struct_InterField>::Serializer(_out, value)) {
                    ara::Message notify_message =
                        ara::Message::createNotificationMessage(
                            someip_address.getService(),
                            someip_address.getInstance(), INTERFIELD_UPDATE_ID);
                    notify_message.setPayloadData(
                        (uint8_t *)_out.getBuffSnapShot().data(),
                        _out.getBuffSnapShot().size());
                    ara::Runtime::getInstance()->notify(notify_message);
                }
            }
        }
    }
    return ara::core::Result<void>::FromValue();
}

ara::core::Result<void> InterField::RegisterGetHandler(
    std::function<ara::core::Future<FieldType>()> getHandler) {
    m_get_handler = getHandler;
    return ara::core::Result<void>::FromValue();
}

ara::core::Result<void> InterField::RegisterSetHandler(
    std::function<ara::core::Future<FieldType>(const FieldType &data)>
        setHandler) {
    m_set_handler = setHandler;
    return ara::core::Result<void>::FromValue();
}

InterFieldArr::InterFieldArr(ara::com::InstanceIdentifierContainer *_p)
    : _pProvideInstances(_p) {}

bool InterFieldArr::hasNotifier() { return true; }

bool InterFieldArr::hasGetter() { return false; }
bool InterFieldArr::hasSetter() { return false; }

ara::core::Result<void> InterFieldArr::Update(FieldType &value) {
    m_field_value = value;
    if (hasNotifier()) {
        // notify
        for (auto &instance : *_pProvideInstances) {
            ara::com::Someip_Address someip_address;
            if (ara::com::AddressTranslator::get()->translate(
                    std::string(instance.toString()), someip_address)) {
                apf::Serializer _out;

                if (apf::someip::SerializableArguments<
                        Struct_InterFieldStArr>::Serializer(_out, value)) {
                    ara::Message notify_message =
                        ara::Message::createNotificationMessage(
                            someip_address.getService(),
                            someip_address.getInstance(),
                            INTERFIELDARR_UPDATE_ID);
                    notify_message.setPayloadData(
                        (uint8_t *)_out.getBuffSnapShot().data(),
                        _out.getBuffSnapShot().size());
                    ara::Runtime::getInstance()->notify(notify_message);
                }
            }
        }
    }
    return ara::core::Result<void>::FromValue();
}

} // namespace fields

} // namespace skeleton
} // namespace InterCommunication
} // namespace ara_api
} // namespace v1